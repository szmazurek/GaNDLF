#!usr/bin/env python
# -*- coding: utf-8 -*-

import os
import sys
import argparse
import subprocess
import pathlib
from pathlib import Path
from datetime import date
import numpy as np
import pandas as pd

import seaborn as sns

def main():
  copyrightMessage = 'Contact: software@cbica.upenn.edu\n\n' + 'This program is NOT FDA/CE approved and NOT intended for clinical use.\nCopyright (c) ' + str(date.today().year) + ' University of Pennsylvania. All rights reserved.' 

  parser = argparse.ArgumentParser(prog='GANDLF_CollectCSV', formatter_class=argparse.RawTextHelpFormatter, description = "Collect statistics from different holdout/validation combinations from output directory.\n\n" + copyrightMessage)
  parser.add_argument('-inputDir', type=str, help = 'Input directory which contains holdout and validation models', required=True)
  parser.add_argument('-outputFile', type=str, help = 'Output CSV file', required=True)
      
  args = parser.parse_args()

  inputDir = os.path.normpath(args.inputDir)
  outputFile = os.path.normpath(args.outputFile)
  
  avg_dice = []

  final_stats = 'Epoch,Train_Loss,Train_Dice,Val_Loss,Val_Dice,Holdout_Loss,Holdout_Dice\n'
  
  for dirs in os.listdir(inputDir):

    currentHoldoutDir = os.path.join(inputDir, dirs)
    if os.path.isdir(currentHoldoutDir): # go in only if it is a directory
      if 'holdout_' in dirs: # ensure it is part of the holdout structure

        for val in os.listdir(currentHoldoutDir):

          currentValidationDir = os.path.join(currentHoldoutDir, val)
          if os.path.isdir(currentValidationDir):

            filesInDir = os.listdir(currentValidationDir) # get all files in each directory

            for i in range(len(filesInDir)):

              if 'trainingScores_log' in filesInDir[i]:

                log_file = os.path.join(currentValidationDir, filesInDir[i])
                with open(log_file) as f:
                  for line in f:
                      pass
                  final_stats = final_stats + line
  
  file = open(outputFile, 'w')
  file.write(final_stats)
  file.close()

  data_full = pd.read_csv(outputFile)
  del data_full['Epoch'] # no need for epoch

  data_loss = data_full
  data_dice = data_full

  del data_loss['Train_Loss'] # keep only dice
  del data_loss['Val_Loss'] # keep only dice
  del data_loss['Holdout_Loss'] # keep only dice
  
  del data_loss['Train_Dice'] # keep only loss
  del data_loss['Val_Dice'] # keep only loss
  del data_loss['Holdout_Dice'] # keep only loss

  data_full.to_csv(outputFile, index=False)

  bplot = sns.boxplot(data=data_full, width=0.5, palette="colorblind")
  bplot.set(xlabel='P', ylabel='common ylabel', title='some title')
  bplot.set_xticklabels(bplot.get_xticklabels(), rotation=15, ha="right")
  bplot.figure.savefig(os.path.join(pathlib.Path(outputFile).parent.absolute(), 'plot.png'), dpi=600)
      

# main function
if __name__ == '__main__':
  main()
