#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import argparse
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from pathlib import Path
from io import StringIO

from GANDLF.cli import copyrightMessage
from GANDLF.utils.plot_utils import (
    plot_classification,
    plot_segmentation,
    plot_regression,
    plot_synthesis,
)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        prog="GANDLF_CollectStats",
        formatter_class=argparse.RawTextHelpFormatter,
        description="Collect statistics from different testing/validation combinations from output directory.\n\n"
        + copyrightMessage,
    )
    parser.add_argument(
        "-m",
        "--modeldir",
        metavar="",
        type=str,
        help="Input directory which contains testing and validation models",
    )
    parser.add_argument(
        "-o",
        "--outputdir",
        metavar="",
        type=str,
        help="Output directory to save stats and plot",
    )

    args = parser.parse_args()

    inputDir = os.path.normpath(args.modeldir)
    outputDir = os.path.normpath(args.outputdir)
    Path(outputDir).mkdir(parents=True, exist_ok=True)
    outputFile = os.path.join(outputDir, "data.csv")  # data file name
    outputPlot = os.path.join(outputDir, "plot.png")  # plot file

    combinedPlots = args.combinedplots

    trainingLogs = os.path.join(inputDir, "logs_training.csv")
    validationLogs = os.path.join(inputDir, "logs_validation.csv")
    testingLogs = os.path.join(inputDir, "logs_testing.csv")

    # Read all the files
    df_training = pd.read_csv(trainingLogs)
    df_validation = pd.read_csv(validationLogs)
    df_testing = pd.read_csv(testingLogs) if os.path.isfile(testingLogs) else None

    # Check for metrics in columns
    segmentation_metrics = ["dice", "jaccard", "hausdorff", "hd100", "hd95", "nsd"]
    classification_metrics = ["accuracy"]
    regression_metrics = ["mae", "mse"]
    synthesis_metrics = ["ssim", "psnr"]

    # Detect if these metrics exist in the columns
    segmentation_detected = any(
        metric in df_training.columns for metric in segmentation_metrics
    )
    classification_detected = any(
        metric in df_training.columns for metric in classification_metrics
    )
    regression_detected = any(
        metric in df_training.columns for metric in regression_metrics
    )
    synthesis_detected = any(
        metric in df_training.columns for metric in synthesis_metrics
    )

    # check for classification task
    if classification_detected:
        print("Classification task detected, generating accuracy and loss plots.")
        plot_classification(
            df_training, df_validation, df_testing, outputDir, combinedPlots
        )
    elif segmentation_detected:
        print("Segmentation task detected, generating dice and loss plots.")
        plot_segmentation(df_training, df_validation, df_testing)
    elif regression_detected:
        print("Regression task detected, generating mae and mse plots.")
        plot_regression(df_training, df_validation, df_testing)
    elif synthesis_detected:
        print("Synthesis task detected, generating ssim and psnr plots.")
        plot_synthesis(df_training, df_validation, df_testing)
    else:
        print("No task detected, exiting.")
        exit(0)

    print("Plots saved successfully.")
