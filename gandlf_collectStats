#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import argparse
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from pathlib import Path
from io import StringIO

from GANDLF.cli import copyrightMessage


def main():
    parser = argparse.ArgumentParser(
        prog="GANDLF_CollectStats",
        formatter_class=argparse.RawTextHelpFormatter,
        description="Collect statistics from different testing/validation combinations from output directory.\n\n"
        + copyrightMessage,
    )
    parser.add_argument(
        "-m",
        "--modeldir",
        metavar="",
        type=str,
        help="Input directory which contains testing and validation models",
    )
    parser.add_argument(
        "-o",
        "--outputdir",
        metavar="",
        type=str,
        help="Output directory to save stats and plot",
    )
    parser.add_argument(
        "-c",
        "--combinedplots",
        metavar="",
        default=False,
        type=bool,
        help="Overlays training and validation plots for both accuracy and loss (classification only).",
    )

    args = parser.parse_args()

    inputDir = os.path.normpath(args.modeldir)
    outputDir = os.path.normpath(args.outputdir)
    Path(outputDir).mkdir(parents=True, exist_ok=True)
    outputFile = os.path.join(outputDir, "data.csv")  # data file name
    outputPlot = os.path.join(outputDir, "plot.png")  # plot file

    combinedPlots = args.combinedplots

    trainingLogs = os.path.join(inputDir, "logs_training.csv")
    validationLogs = os.path.join(inputDir, "logs_validation.csv")
    testingLogs = os.path.join(inputDir, "logs_testing.csv")

    if os.path.exists(testingLogs):
        testingLogsCSV = pd.read_csv(testingLogs)

        # check for classification task
        if len(testingLogsCSV) == 0:
            print("Classification task detected, generating accuracy and loss plots.")

            # check whether the user wants training + validation overlaid plots
            if combinedPlots:
                df_training = pd.read_csv(trainingLogs)
                df_validation = pd.read_csv(validationLogs)

                epochs = len(df_training)

                fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12, 6))
                plt.subplots_adjust(wspace=0.5, hspace=0.5)

                sns.lineplot(
                    data=df_training,
                    x="epoch_no",
                    y="train_balanced_accuracy",
                    ax=axes[0],
                    label="Training",
                )
                sns.lineplot(
                    data=df_validation,
                    x="epoch_no",
                    y="valid_balanced_accuracy",
                    ax=axes[0],
                    label="Validation",
                )
                axes[0].set(xlim=(0, epochs - 1), ylim=(0, 1))
                axes[0].set(xlabel="Epoch", ylabel="Accuracy", title="Accuracy Plot")
                axes[0].legend()

                sns.lineplot(
                    data=df_training,
                    x="epoch_no",
                    y="train_loss",
                    ax=axes[1],
                    label="Training",
                )
                sns.lineplot(
                    data=df_validation,
                    x="epoch_no",
                    y="valid_loss",
                    ax=axes[1],
                    label="Validation",
                )
                axes[1].set(xlim=(0, epochs - 1))
                axes[1].set(xlabel="Epoch", ylabel="Loss", title="Loss Plot")
                axes[1].legend()

                plt.savefig(outputPlot, dpi=600)

                print("Plots saved successfully.")

            else:
                df_training = pd.read_csv(trainingLogs)
                df_validation = pd.read_csv(validationLogs)

                epochs = len(df_training)

                fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(12, 12))
                plt.subplots_adjust(wspace=0.5, hspace=0.5)

                sns.lineplot(
                    data=df_training,
                    x="epoch_no",
                    y="train_balanced_accuracy",
                    ax=axes[0, 0],
                )
                axes[0, 0].set(xlim=(0, epochs - 1), ylim=(0, 1))
                axes[0, 0].set(
                    xlabel="Epoch",
                    ylabel="Accuracy",
                    title="Training Accuracy Plot",
                )

                sns.lineplot(
                    data=df_validation,
                    x="epoch_no",
                    y="valid_balanced_accuracy",
                    ax=axes[0, 1],
                )
                axes[0, 1].set(xlim=(0, epochs - 1), ylim=(0, 1))
                axes[0, 1].set(
                    xlabel="Epoch",
                    ylabel="Accuracy",
                    title="Validation Accuracy Plot",
                )

                sns.lineplot(
                    data=df_training,
                    x="epoch_no",
                    y="train_loss",
                    ax=axes[1, 0],
                )
                axes[1, 0].set(xlim=(0, epochs - 1))
                axes[1, 0].set(
                    xlabel="Epoch",
                    ylabel="Loss",
                    title="Training Loss Plot",
                )

                sns.lineplot(
                    data=df_validation,
                    x="epoch_no",
                    y="valid_loss",
                    ax=axes[1, 1],
                )
                axes[1, 1].set(xlim=(0, epochs - 1))
                axes[1, 1].set(
                    xlabel="Epoch",
                    ylabel="Loss",
                    title="Validation Loss Plot",
                )

                plt.savefig(outputPlot, dpi=600)

                print("Plots saved successfully.")

        else:
            print("Segmentation task detected, generating dice and loss plots.")

            final_stats = "Epoch,Train_Loss,Train_Dice,Val_Loss,Val_Dice,Testing_Loss,Testing_Dice\n"

            # loop through output directory
            for dirs in os.listdir(inputDir):
                currentTestingDir = os.path.join(inputDir, dirs)
                if os.path.isdir(currentTestingDir):
                    if "testing_" in dirs:
                        # loop through all validation directories
                        for val in os.listdir(currentTestingDir):
                            currentValidationDir = os.path.join(currentTestingDir, val)
                            if os.path.isdir(currentValidationDir):
                                filesInDir = os.listdir(currentValidationDir)

                                for i, n in enumerate(filesInDir):
                                    if "trainingScores_log" in n:
                                        log_file = os.path.join(currentValidationDir, n)
                                        with open(log_file) as f:
                                            for line in f:
                                                pass
                                            final_stats += line

            data_string = StringIO(final_stats)
            data_full = pd.read_csv(data_string)
            del data_full["Epoch"]
            data_full.to_csv(outputFile, index=False)

            data_loss = data_full.copy()
            data_dice = data_full.copy()

            cols = ["Train", "Val", "Testing"]
            for i in cols:
                del data_dice[i + "_Loss"]
                del data_loss[i + "_Dice"]
                data_loss.rename(columns={i + "_Loss": i}, inplace=True)
                data_dice.rename(columns={i + "_Dice": i}, inplace=True)

            fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12, 6))

            sns.boxplot(data=data_dice, width=0.5, palette="colorblind", ax=axes[0])
            axes[0].set(ylim=(0, 1))
            axes[0].set(xlabel="Dataset", ylabel="Dice", title="Dice plot")
            axes[0].set_xticklabels(axes[0].get_xticklabels(), rotation=15, ha="right")

            sns.boxplot(data=data_loss, width=0.5, palette="colorblind", ax=axes[1])
            axes[1].set(ylim=(0, 1))
            axes[1].set(xlabel="Dataset", ylabel="Loss", title="Loss plot")

            plt.savefig(outputPlot, dpi=600)

            print("Plots saved successfully.")


if __name__ == "__main__":
    main()
