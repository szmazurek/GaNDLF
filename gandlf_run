#!usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function, division
import os, argparse, ast, sys
from GANDLF.utils import fix_paths
fix_paths(os.getcwd())  # add relevant vips path

from datetime import date

from GANDLF import version
from GANDLF.cli.main_run import main_run


if __name__ == "__main__":
    copyrightMessage = (
        "Contact: gandlf@cbica.upenn.edu\n\n"
        + "This program is NOT FDA/CE approved and NOT intended for clinical use.\nCopyright (c) "
        + str(date.today().year)
        + " University of Pennsylvania. All rights reserved.\n\nCitation: https://arxiv.org/abs/2103.01006"
    )
    parser = argparse.ArgumentParser(
        prog="GANDLF",
        formatter_class=argparse.RawTextHelpFormatter,
        description="Semantic segmentation, regression, and classification for medical images using Deep Learning.\n\n"
        + copyrightMessage,
    )
    parser.add_argument(
        "-c", "--config",
        metavar="",
        type=str,
        help="The configuration file (contains all the information related to the training/inference session)",
        # required=True,
    )
    parser.add_argument(
        "-i", "--inputdata",
        metavar="",
        type=str,
        help="Data CSV file that is used for training/inference; can also take comma-separated training-validatation pre-split CSVs",
        # required=True,
    )
    parser.add_argument(
        "-t", "--train",
        metavar="",
        type=ast.literal_eval,
        help="True: training and False: inference; for inference, there needs to be a compatible model saved in '-output'",
        # required=True,
    )
    parser.add_argument(
        "-m", "--modeldir",
        metavar="",
        type=str,
        help="Training: Output directory to save intermediate files and model weights; inference: location of previous training session output",
        # required=True,
    )
    parser.add_argument(
        "-d", "--device",
        default="cuda",
        metavar="",
        type=str,
        help="Device to perform requested session on 'cpu' or 'cuda'; for cuda, ensure CUDA_VISIBLE_DEVICES env var is set",
        # required=True,
    )
    parser.add_argument(
        "-r", "--resetprev",
        metavar="",
        default=False,
        type=ast.literal_eval,
        help="Whether the previous run in the output directory will be discarded or not",
        required=False,
    )
    # parser.add_argument(
    #     "-rf", "--resetfull",
    #     metavar="",
    #     default=False,
    #     type=ast.literal_eval,
    #     help="Whether the previous run in the output directory will be discarded or not",
    #     required=False,
    # )

    parser.add_argument(
        "-v",
        "--version",
        action="version",
        version="%(prog)s v{}".format(version) + "\n\n" + copyrightMessage,
        help="Show program's version number and exit.",
    )

    args = parser.parse_args()

    if not(os.path.isfile(args.config)):
        sys.exit("ERROR: Configuration file not found!")
    
    if args.inpudata is None:
        sys.exit("ERROR: Input data file not found!")
    
    if args.train is None:
        sys.exit("ERROR: Training flag not specified!")
    
    if args.modeldir is None:
        sys.exit("ERROR: Model directory not specified!")

    main_run(
        args.inputdata, args.config, args.modeldir, args.train, args.device, args.resetprev
    )

    print("Finished.")
