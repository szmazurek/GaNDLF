#!usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function, division
import os
from GANDLF.utils import *
fix_paths(os.getcwd()) # add relevant vips path

import argparse
import sys
import pandas as pd
import gc
from pathlib import Path
import pkg_resources
from datetime import date

from GANDLF.training_manager import TrainingManager
from GANDLF.inference_manager import InferenceManager 
from GANDLF.parseConfig import parseConfig

def main():
    copyrightMessage = 'Contact: software@cbica.upenn.edu\n\n' + 'This program is NOT FDA/CE approved and NOT intended for clinical use.\nCopyright (c) ' + str(date.today().year) + ' University of Pennsylvania. All rights reserved.' 
    parser = argparse.ArgumentParser(prog='GANDLF', formatter_class=argparse.RawTextHelpFormatter, description = "Image Semantic Segmentation and Regression using Deep Learning.\n\n" + copyrightMessage)
    parser.add_argument('-config', type=str, help = 'The configuration file (contains all the information related to the training/inference session), this is read from \'modelDir\' during inference', required=True)
    parser.add_argument('-data', type=str, help = 'Data csv file that is used for training/inference', required=True)
    parser.add_argument('-output', type=str, help = 'Output directory to save intermediate files and model weights', required=True)
    parser.add_argument('-train', default=1, type=int, help = '1 == training and 0 == inference; for 0, there needs to be a compatible model saved in \'-modelDir\'', required=True)
    parser.add_argument('-modelDir', type=str, help = 'The pre-trained model directory that is used for inference, needs to contain the configuration', required=False)
    parser.add_argument('-device', default='cuda', type=str, help = 'Device to perform requested session on \'cpu\' or \'cuda\'; for cuda, ensure CUDA_VISIBLE_DEVICES env var is set', required=True)
    parser.add_argument('-reset_prev', default=False, type=bool, help = 'Whether the previous run in the output directory will be discarded or not', required=False)
    
    parser.add_argument('-v', '--version', action='version', 
    version = format(parser.prog) + ' v' + pkg_resources.require(parser.prog)[0].version + '\n\n' + copyrightMessage, help="Show program's version number and exit.")

    args = parser.parse_args()

    file_data_full = args.data
    model_parameters = args.config
    parameters = parseConfig(model_parameters)
    device = args.device
    model_path = args.output
    mode = args.train

    reset_prev = args.reset_prev

    if '-1' in device:
        device = 'cpu'

    if mode == 0: # inference mode
        pretrainedModelPath = args.modelDir
    else:
        Path(model_path).mkdir(parents=True, exist_ok=True)

    # parse training CSV
    data_full, headers = parseTrainingCSV(file_data_full)
        
    if mode != 0: # training mode
        TrainingManager(dataframe=data_full, headers = headers, outputDir=model_path, parameters=parameters, device=device, reset_prev = reset_prev)
    else:
        InferenceManager(dataframe=data_full, headers = headers, outputDir=model_path, parameters=parameters, device=device)

if __name__ == '__main__':
    main()
