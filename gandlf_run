#!usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function, division
import os, argparse, ast, sys
from GANDLF.utils import fix_paths
fix_paths(os.getcwd())  # add relevant vips path

from datetime import date

from GANDLF import version
from GANDLF.cli import main_run


if __name__ == "__main__":
    copyrightMessage = (
        "Contact: gandlf@cbica.upenn.edu\n\n"
        + "This program is NOT FDA/CE approved and NOT intended for clinical use.\nCopyright (c) "
        + str(date.today().year)
        + " University of Pennsylvania. All rights reserved.\n\nCitation: https://arxiv.org/abs/2103.01006"
    )
    parser = argparse.ArgumentParser(
        prog="GANDLF",
        formatter_class=argparse.RawTextHelpFormatter,
        description="Semantic segmentation, regression, and classification for medical images using Deep Learning.\n\n"
        + copyrightMessage,
    )
    parser.add_argument(
        "-c", "--config",
        metavar="",
        type=str,
        help="The configuration file (contains all the information related to the training/inference session)",
    )
    parser.add_argument(
        "-i", "--inputdata",
        metavar="",
        type=str,
        help="Data CSV file that is used for training/inference; can also take comma-separated training-validatation pre-split CSVs",
    )
    parser.add_argument(
        "-t", "--train",
        metavar="",
        type=ast.literal_eval,
        help="True: training and False: inference; for inference, there needs to be a compatible model saved in '-output'",
    )
    parser.add_argument(
        "-m", "--modeldir",
        metavar="",
        type=str,
        help="Training: Output directory to save intermediate files and model weights; inference: location of previous training session output",
    )
    parser.add_argument(
        "-d", "--device",
        default="cuda",
        metavar="",
        type=str,
        help="Device to perform requested session on 'cpu' or 'cuda'; for cuda, ensure CUDA_VISIBLE_DEVICES env var is set",
    )
    parser.add_argument(
        "-r", "--resetprev",
        metavar="",
        default=False,
        type=ast.literal_eval,
        help="Whether the previous run in the output directory will be discarded or not",
    )

    parser.add_argument(
        "-v",
        "--version",
        action="version",
        version="%(prog)s v{}".format(version) + "\n\n" + copyrightMessage,
        help="Show program's version number and exit.",
    )

    args = parser.parse_args()

    # check for required parameters - this is needed here to keep the cli clean
    for param_none_check in [args.inputdata, args.modeldir, args.train, args.config]:
        if param_none_check is None:
            sys.exit("ERROR: Missing required parameter:", param_none_check)

    # config file should always be present
    if not(os.path.isfile(args.config)):
        sys.exit("ERROR: Configuration file not found!")
    
    ### 
    # from testing.test_full import test_differential_privacy_epsilon_classification_rad_2d, test_differential_privacy_simple_classification_rad_2d
    
    # test_differential_privacy_simple_classification_rad_2d("cuda")
    # test_differential_privacy_epsilon_classification_rad_2d("cuda")
    
    from testing.test_full import test_clip_train_classification_rad_3d, test_scheduler_classification_rad_2d, test_inference_classification_rad_3d, test_train_classification_rad_2d, test_train_classification_rad_3d, test_train_segmentation_rad_2d, test_metrics_regression_rad_2d, test_preprocess_functions, test_dataloader_construction_train_segmentation_3d, test_augmentation_functions, test_train_regression_rad_2d, test_train_regression_rad_3d, test_cli_function_mainrun, test_normtype_train_segmentation_rad_3d, test_metrics_segmentation_rad_2d, test_anonymizer, test_inference_classification_with_logits_single_fold_rad_3d, test_config_read, test_constructTrainingCSV, test_train_inference_segmentation_histology_2d 

    # test_train_segmentation_rad_2d("cuda")
    # test_metrics_regression_rad_2d("cuda")
    # test_clip_train_classification_rad_3d("cuda")
    # test_scheduler_classification_rad_2d("cuda")
    # test_inference_classification_rad_3d("cuda")
    # test_train_classification_rad_2d("cuda")
    # test_train_classification_rad_3d("cuda")
    # test_preprocess_functions()
    # test_train_regression_rad_2d("cuda")
    # test_train_regression_rad_3d("cuda")
    # test_cli_function_mainrun("cuda")
    # test_normtype_train_segmentation_rad_3d("cuda")
    # test_dataloader_construction_train_segmentation_3d("cuda")
    # test_config_read()
    # test_augmentation_functions()
    # test_anonymizer()
    # test_inference_classification_with_logits_single_fold_rad_3d("cuda")
    # test_metrics_segmentation_rad_2d("cuda")
    test_constructTrainingCSV()
    test_train_inference_segmentation_histology_2d("cpu")
    
    ###
    main_run(
        args.inputdata, args.config, args.modeldir, args.train, args.device, args.resetprev
    )

    print("Finished.")
