# Choose the segmentation model here 
modelName = resunet
# Set base filters: number of filters present in the initial module of the U-Net convolution; for IncU-Net, keep this divisible by 4
base_filters = 30
# Path where the model has to be saved 
# folderForOutput = ../model_weights/
# Set the number of classes - including the background class
numberOfOutputClasses = 2
# Number of channels/modalities - we shall use this as sanity check when we read the train.csv or test.csv
numberOfInputChannels = 3
# Patch size during training - 2D patch for breast images since third dimension is not patched 
patch_size = [144,144,1000]
# Number of epochs
num_epochs = 600
# Set the batch size
batch_size = 1
# Set the initial learning rate
learning_rate = 1
# Set which loss function you want to use - options : 'dc' - for dice only, 'dcce' - for sum of dice and CE and you can guess the next (only lower-case please)
# options: dc (dice only), ce (), dcce (sume of dice and ce), mse (), ...
loss_function = dc
# Which optimizer do you want to use - adam/sgd
opt = adam
# How many best models to save
save_best = 5
# the value of 'k' for cross-validation, this is the percentage of total training data to use as validation;
# randomized split is performed using sklearn's KFold method
# for single fold run, use '-' before the fold number
kcross_validation = 10
# various data augmentation techniques
# options: affine, elastic, downsample, motion, ghosting, bias, blur, gaussianNoise, swap
# keep/edit as needed
# all transforms: https://torchio.readthedocs.io/transforms/transforms.html?highlight=transforms
data_augmentation = ['affine', 'elastic', 'motion', 'ghosting', 'bias', 'blur', 'noise', 'swap']
